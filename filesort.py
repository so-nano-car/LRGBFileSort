"""
===================================
File organization program ver. 1.0
===================================
*By: so-nano-car
*License: BSD

***********************************************************************************************************
WARNING! 
THIS PROGRAM WILL MODIFY THE SPECIFIED FILES WITHOUT USER CONFIRMATION!
PLEASE OBTAIN COPIES OF THE ORIGINAL FILES BEFORE RUNNING THIS PROGRAM!
THE AUTHOR CANNOT BE HELD RESPONSIBLE FOR ANY LOSS OR CORRUPTION ETC. OF YOUR DATA, BY USING THIS PROGRAM!
***********************************************************************************************************

*Feature
1. Make sub folders with object name and move fits files to corresponding sub folders.
2. For each sub folder, make sub folders with filter name and move fits files to corresponding sub folders.
3. Delete empty sub folders.
Optimized for sorting fits files of monochrome LRGB imaging data generated by APT.
Optimum settings for file sorting criteria may vary depending on your imaging program settings.

*Usage
0. Describe file sorting criteria on "file(n)" in function "filesearch()" if necessary.  
1. Put this script file to directory containing image file source folder.
2. Specify directory of image file source to "DEFAULT_FILE_PATH".
3. Run python script. ex. "python hoge.py"

*Note
If any folder named "path(n)" (ex. L, R,...) exists in the directory "DEFAULT_FILE_PATH", this program will not work.
Please delete these folders maunally before running this program.

*Revision history
ver. 1.0 initial release 7-Oct. 2021

"""

from genericpath import isfile
import os
import shutil
import time
from astropy.io import fits

t1 = time.time()

# Obtain list of files under the specified directory
def filename(filepath):
    files = os.listdir(filepath)
    files_file = [f for f in files if os.path.isfile(os.path.join(filepath,f)) if f.endswith('.fit')]
    return(files_file)

# Read fits header and store object name to an array
def fitsHeaderRead(files_file):
    for a, im in enumerate(files_file):
        hdul = fits.open(f'{filepath}/{files_file[a]}')
        hdr = hdul[0].header['OBJECT']
        os.makedirs(f'{filepath}/{hdr}', exist_ok = True)
        hdul.close()        
        shutil.move(f'{filepath}/{files_file[a]}',f'{filepath}/{hdr}')
    
# Search file that matches with the criteria (frame L, R, G, B), change criteria (file[n]) if necessary 
def filesearch(files_file):
    file1 = [i1 for i1 in files_file if 'L_L' in i1]
    file2 = [i2 for i2 in files_file if 'L_R' in i2]
    file3 = [i3 for i3 in files_file if 'L_G' in i3]
    file4 = [i4 for i4 in files_file if 'L_B' in i4]
    file5 = [i5 for i5 in files_file if 'L_HA' in i5]
    file6 = [i6 for i6 in files_file if 'L_OIII' in i6]
    file7 = [i7 for i7 in files_file if 'L_SII' in i7]
    
    return(file1, file2, file3, file4, file5, file6, file7)

# Move files to the specified sub folders 
def moveFiles(filepath, file1, file2, file3, file4, file5, file6, file7):
    # Make sub folders
    path1 = f'{filepath}/L'
    path2 = f'{filepath}/R'
    path3 = f'{filepath}/G'
    path4 = f'{filepath}/B'
    path5 = f'{filepath}/HA'
    path6 = f'{filepath}/OIII'
    path7 = f'{filepath}/SII'
    path_list = [path1, path2, path3, path4, path5, path6, path7]
    for l in range (0,len(path_list)):
        os.makedirs(path_list[l], exist_ok = True)
    
    # Move files to sub folders
    for k1 in range(0, len(file1)):
        shutil.move(f'{filepath}/{file1[k1]}',f'{path_list[0]}')
    for k2 in range(0, len(file2)):
        shutil.move(f'{filepath}/{file2[k2]}',f'{path_list[1]}')
    for k3 in range(0, len(file3)):
        shutil.move(f'{filepath}/{file3[k3]}',f'{path_list[2]}')
    for k4 in range(0, len(file4)):
        shutil.move(f'{filepath}/{file4[k4]}',f'{path_list[3]}')
    for k5 in range(0, len(file5)):
        shutil.move(f'{filepath}/{file5[k5]}',f'{path_list[4]}')
    for k6 in range(0, len(file6)):
        shutil.move(f'{filepath}/{file6[k6]}',f'{path_list[5]}')
    for k7 in range(0, len(file7)):
        shutil.move(f'{filepath}/{file7[k7]}',f'{path_list[6]}')

# Main routine
if __name__ == '__main__':
    # Define default parameters: change file path at first 
    DEFAULT_FILE_PATH = './2021-08-05'
    filepath = DEFAULT_FILE_PATH

    # Sort files
    files_file = filename(filepath)
    fitsHeaderRead(files_file)
    dirs = os.listdir(filepath)
    for d in dirs:
        if os.path.isdir(os.path.join(filepath, d)):
            new_path = f'{filepath}/{d}'
            print(f'Folders generated: {new_path}')
            new_files_file = filename(new_path)
            file1, file2, file3, file4, file5, file6, file7 = filesearch(new_files_file)
            moveFiles(new_path, file1, file2, file3, file4, file5, file6, file7)

    # Delete empty directories
    dirs2 = os.listdir(filepath)
    for e in dirs2:
        if os.path.isdir(os.path.join(filepath, e)):
            new_path2 = f'{filepath}/{e}'
            dirs3 = os.listdir(new_path2)
            for e2 in dirs3:
                if os.path.isdir(os.path.join(new_path2, e2)):
                    new_path3 = f'{new_path2}/{e2}'
                    try:
                        os.rmdir(new_path3)
                    except OSError:
                        pass
            
    print('Processing complete.Elapsed time: {0} s.'.format(time.time()-t1))
